/*
 * Mayastor RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SpecsNexuses : User specification of a nexus.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpecsNexuses {
    /// List of children.
    #[serde(rename = "children")]
    pub children: Vec<String>,
    /// Managed by our control plane
    #[serde(rename = "managed")]
    pub managed: bool,
    /// Node where the nexus should live.
    #[serde(rename = "node")]
    pub node: String,
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<Box<crate::models::SpecsOperation>>,
    /// Volume which owns this nexus, if any
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Share Protocol
    #[serde(rename = "share")]
    pub share: Share,
    /// Size of the nexus.
    #[serde(rename = "size")]
    pub size: i64,
    /// The state the nexus should eventually reach.
    #[serde(rename = "state")]
    pub state: State,
    /// Nexus Id
    #[serde(rename = "uuid")]
    pub uuid: String,
}

impl SpecsNexuses {
    /// User specification of a nexus.
    pub fn new(children: Vec<String>, managed: bool, node: String, share: Share, size: i64, state: State, uuid: String) -> SpecsNexuses {
        SpecsNexuses {
            children,
            managed,
            node,
            operation: None,
            owner: None,
            share,
            size,
            state,
            uuid,
        }
    }
}

/// Share Protocol
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Share {
    #[serde(rename = "false")]
    _False,
    #[serde(rename = "nvmf")]
    Nvmf,
    #[serde(rename = "iscsi")]
    Iscsi,
    #[serde(rename = "nbd")]
    Nbd,
}
/// The state the nexus should eventually reach.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Creating")]
    Creating,
    #[serde(rename = "Created")]
    Created,
    #[serde(rename = "Deleting")]
    Deleting,
    #[serde(rename = "Deleted")]
    Deleted,
}

