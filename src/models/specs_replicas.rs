/*
 * Mayastor RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SpecsReplicas : User specification of a replica.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpecsReplicas {
    /// Managed by our control plane
    #[serde(rename = "managed")]
    pub managed: bool,
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<Box<crate::models::SpecsOperation2>>,
    #[serde(rename = "owners")]
    pub owners: Box<crate::models::SpecsOwners>,
    /// The pool that the replica should live on.
    #[serde(rename = "pool")]
    pub pool: String,
    /// Protocol used for exposing the replica.
    #[serde(rename = "share")]
    pub share: Share,
    /// The size that the replica should be.
    #[serde(rename = "size")]
    pub size: i64,
    /// The state that the replica should eventually achieve.
    #[serde(rename = "state")]
    pub state: State,
    /// Thin provisioning.
    #[serde(rename = "thin")]
    pub thin: bool,
    /// uuid of the replica
    #[serde(rename = "uuid")]
    pub uuid: String,
}

impl SpecsReplicas {
    /// User specification of a replica.
    pub fn new(managed: bool, owners: crate::models::SpecsOwners, pool: String, share: Share, size: i64, state: State, thin: bool, uuid: String) -> SpecsReplicas {
        SpecsReplicas {
            managed,
            operation: None,
            owners: Box::new(owners),
            pool,
            share,
            size,
            state,
            thin,
            uuid,
        }
    }
}

/// Protocol used for exposing the replica.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Share {
    #[serde(rename = "false")]
    _False,
    #[serde(rename = "nvmf")]
    Nvmf,
    #[serde(rename = "iscsi")]
    Iscsi,
    #[serde(rename = "nbd")]
    Nbd,
}
/// The state that the replica should eventually achieve.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Creating")]
    Creating,
    #[serde(rename = "Created")]
    Created,
    #[serde(rename = "Deleting")]
    Deleting,
    #[serde(rename = "Deleted")]
    Deleted,
}

